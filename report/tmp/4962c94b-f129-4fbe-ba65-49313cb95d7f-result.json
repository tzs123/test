{"name": "test_login[case4]", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'header'", "trace": "self = <testcase.test_login_demo.TestLogin object at 0x000001E0A631F5C0>\ncase = ['传入错误账户', 'password=123456,account=admin1111', '10001', 'params_error', '']\n\n    def test_login(self,case):\n        url = data[1][1]  # 接口URL\n        method = data[2][1]  #请求方法\n        d = get_test_data(case[1])   #获取传入接口的参数\n>       r = request(url=url,method=method,data=d)\n\ntest_login_demo.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\utils.py:25: in request\n    r = requests.post(url=url,data=data,header=header)\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'post', url = 'http://192.168.0.219:7777/login'\nkwargs = {'data': {'password': '123456,account'}, 'header': None, 'json': None}\nsession = <requests.sessions.Session object at 0x000001E0A631FBA8>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'header'\n\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python36\\site-packages\\requests\\api.py:61: TypeError"}, "parameters": [{"name": "case", "value": "['传入错误账户', 'password=123456,account=admin1111', '10001', 'params_error', '']"}], "start": 1656744887091, "stop": 1656744887091, "uuid": "c0a57364-ec1e-45b4-a04a-5c0cd85d4315", "historyId": "2373454feae641e8713d1e4e6a842a67", "testCaseId": "635f167e9ec99310021d4ad82ace208f", "fullName": "test_login_demo.TestLogin#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.skipif(False, reason='此版本不测试')"}, {"name": "suite", "value": "test_login_demo"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "MS-SLSXLICKSUSF"}, {"name": "thread", "value": "19192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login_demo"}]}