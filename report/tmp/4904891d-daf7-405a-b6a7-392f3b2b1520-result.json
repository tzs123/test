{"name": "test_login", "status": "broken", "statusDetails": {"message": "ValueError: Row or column values must be at least 1", "trace": "self = <testcase.test_login_demo.TestLogin object at 0x000001D5230B7C50>\n\n    def test_login(self):\n        ws = load_workbook(data)\n        ws.save(data_res)\n        ws_res = load_workbook(data_res)\n        st_res = ws_res[\"app\"]\n        for i in range(0,6):\n            if (excel[i]['是否执行']) != 'Y':\n                print('此版本不测试')\n            else:\n                url = excel[i]['请求URL']  # 接口URL\n                method = excel[i]['请求方法']  #请求方法\n                d = eval(excel[i]['请求参数'])  #获取传入接口的参数\n                r = request(url=url,method=method,data=d)\n                print(r.text)\n                try:\n                    assert int(excel[i]['状态码']) == r.json()['msg_code']  #断言响应码\n                    assert excel[i]['返回信息'] == r.json()['msg']  #断言响应信息\n>                   ExcelHandler.write(data_res,'app',i,11,'PASS')\n\ntest_login_demo.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfile = 'C:\\\\Users\\\\Administrator\\\\.jenkins\\\\workspace\\\\psimsendemail\\\\untitled\\\\report\\\\test_report.xlsx'\nsheet_name = 'app', row = 0, column = 11, data = 'PASS'\n\n    @staticmethod\n    def write(file, sheet_name, row, column, data):\n        \"\"\"写入 Excel 数据\"\"\"\n        wb = load_workbook(str(file))\n        sheet = wb[sheet_name]\n        # 修改单元格\n>       sheet.cell(row, column).value = data\n\n..\\common\\excel_util.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Worksheet \"app\">, row = 0, column = 11, value = None\n\n    def cell(self, row, column, value=None):\n        \"\"\"\n        Returns a cell object based on the given coordinates.\n    \n        Usage: cell(row=15, column=1, value=5)\n    \n        Calling `cell` creates cells in memory when they\n        are first accessed.\n    \n        :param row: row index of the cell (e.g. 4)\n        :type row: int\n    \n        :param column: column index of the cell (e.g. 3)\n        :type column: int\n    \n        :param value: value of the cell (e.g. 5)\n        :type value: numeric or time or string or bool or none\n    \n        :rtype: openpyxl.cell.cell.Cell\n        \"\"\"\n    \n        if row < 1 or column < 1:\n>           raise ValueError(\"Row or column values must be at least 1\")\nE           ValueError: Row or column values must be at least 1\n\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python36\\site-packages\\openpyxl\\worksheet\\worksheet.py:238: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_login_demo.TestLogin object at 0x000001D5230B7C50>\n\n    def test_login(self):\n        ws = load_workbook(data)\n        ws.save(data_res)\n        ws_res = load_workbook(data_res)\n        st_res = ws_res[\"app\"]\n        for i in range(0,6):\n            if (excel[i]['是否执行']) != 'Y':\n                print('此版本不测试')\n            else:\n                url = excel[i]['请求URL']  # 接口URL\n                method = excel[i]['请求方法']  #请求方法\n                d = eval(excel[i]['请求参数'])  #获取传入接口的参数\n                r = request(url=url,method=method,data=d)\n                print(r.text)\n                try:\n                    assert int(excel[i]['状态码']) == r.json()['msg_code']  #断言响应码\n                    assert excel[i]['返回信息'] == r.json()['msg']  #断言响应信息\n                    ExcelHandler.write(data_res,'app',i,11,'PASS')\n                except Exception as e:\n>                   ExcelHandler.write(data_res,'app',i,11,e)\n\ntest_login_demo.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\excel_util.py:77: in write\n    sheet.cell(row, column).value = data\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Worksheet \"app\">, row = 0, column = 11, value = None\n\n    def cell(self, row, column, value=None):\n        \"\"\"\n        Returns a cell object based on the given coordinates.\n    \n        Usage: cell(row=15, column=1, value=5)\n    \n        Calling `cell` creates cells in memory when they\n        are first accessed.\n    \n        :param row: row index of the cell (e.g. 4)\n        :type row: int\n    \n        :param column: column index of the cell (e.g. 3)\n        :type column: int\n    \n        :param value: value of the cell (e.g. 5)\n        :type value: numeric or time or string or bool or none\n    \n        :rtype: openpyxl.cell.cell.Cell\n        \"\"\"\n    \n        if row < 1 or column < 1:\n>           raise ValueError(\"Row or column values must be at least 1\")\nE           ValueError: Row or column values must be at least 1\n\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python36\\site-packages\\openpyxl\\worksheet\\worksheet.py:238: ValueError"}, "start": 1656909217118, "stop": 1656909218205, "uuid": "572dccca-0c76-4346-a560-2321b8ed02a3", "historyId": "966da4c978c322b6b1d09eb1e0322926", "testCaseId": "635f167e9ec99310021d4ad82ace208f", "fullName": "test_login_demo.TestLogin#test_login", "labels": [{"name": "suite", "value": "test_login_demo"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "MS-SLSXLICKSUSF"}, {"name": "thread", "value": "20244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login_demo"}]}